#!/usr/bin/env ruby
$:.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'gli'
require 'chem'
require 'io/wait'

include GLI::App

program_desc 'chem is a tool for list manipulation and shell automation'

version Chem::VERSION

chem_config = Chem::Config.new

subcommand_option_handling :normal
arguments :strict
preserve_argv
# sort_help :manually

pre do
  chem_config.load
end

switch [:verbose, :V], :desc => 'Display verbose output', :negatable => false

desc 'Create an empty .chemrc file'
skips_pre
command :init do |c|
  c.action do |global_options,options,args|
    chem_config.init
  end
end

desc 'Create a fake .chemrc'
skips_pre
command :stub do |c|
  c.action do |global_options,options,args|
    chem_config.init
    chem_config.config = {
      "list1" => ['abc', 'def', 'ghi', 'jkl'],
      "list-2" => [123, 345, 567, 789],
      "list_3" => [:a1, :b2, :c3, :d4],
    }
    chem_config.save
  end
end

desc 'List all collections'
command :list do |c|
  c.action do |global_options,options,args|
    puts chem_config.list
  end
end

desc 'Show the contents of a collection'
arg_name '<name>'
command :out do |c|
  c.action do |global_options,options,args|
    if args[0]
      collection = chem_config.get(args[0])
      if collection
        if global_options[:verbose]
          puts Chem::Helpers.table_display(['id', 'value'], (0...collection.size).to_a, collection)
        else
          puts collection
        end
      else
        raise "Invalid collection \"#{args[0]}\""
      end
    end
  end
end

desc 'Create an empty collection'
arg_name '<name>'
command :new do |c|
  c.action do |global_options,options,args|
    raise "Specify a name for the new collection." unless args[0]
    raise "A collection named \"#{args[0]}\" already exists" if chem_config.exist? args[0]
    chem_config.set(args[0], [])
    chem_config.save
    puts "Added new collection \"#{args[0]}\""
  end
end

desc 'Create or modify a collection with data from stdin'
arg_name '<name>'
command :in do |c|
  c.action do |global_options,options,args|
    raise "Specify a name for the new collection." unless args[0]
    raise "A collection named \"#{args[0]}\" already exists" if chem_config.exist? args[0]

    while !$stdin.ready?
      sleep 0.01
    end

    input = ""
    if $stdin.ready?
      $stdin.each {|line| input += line }
    end
    input = input.split "\n"

    chem_config.set(args[0], input)
    chem_config.save
    puts "Added new collection \"#{args[0]}\""
  end
end

desc 'Rename a collection'
arg_name '<old> <new>'
command :rename do |c|
  c.action do |global_options,options,args|
    if args[0] && args[1]
      raise "No collection named \"#{args[0]}\" exists." unless chem_config.exist? args[0]
      raise "A collection named \"#{args[1]}\" already exists." if chem_config.exist? args[1]

      chem_config.set(args[1], chem_config.get(args[0]))
      chem_config.delete(args[0])
      chem_config.save
    end
  end
end

desc 'Delete a collection'
arg_name '<name>'
command :drop do |c|
  c.action do |global_options,options,args|
    if args[0]
      if chem_config.exist? args[0]
        chem_config.delete args[0]
        chem_config.save
      end
    else
      raise "Specify the collection to delete"
    end
  end
end

desc 'Edit a collection in vi'
arg_name '<name>'
command :edit do |c|
  c.action do |global_options,options,args|
    if args[0]
      require 'tempfile'
      collection = chem_config.get(args[0])
      if collection
        text = collection.join("\n")
        file = Tempfile.new('chem')
        file.write text
        file.rewind
        system("vi #{file.path}")
        text = File.read(file.path)
        file.unlink
        chem_config.set(args[0], text.split("\n"))
        chem_config.save
        puts "Edited collection \"#{args[0]}\""
      else
        raise "Invalid collection \"#{args[0]}\""
      end
    else
      raise "Specify a name for the collection to edit."
    end
  end
end

desc 'Execute a command or set of commands with substitution (use quotes)'
arg_name '<cmd_1> ... <cmd_n>'
command :exec do |c|
  c.action do |global_options,options,args|
    collection = Chem::Collection.new(nil, args)
    puts collection.run(chem_config)
  end
end

desc 'Execute a collection as a list of commands with substitution'
arg_name '<name>'
command :run do |c|
  c.action do |global_options,options,args|
    collection = chem_config.get(args[0])
    if collection
      commands = collection.evaluate(chem_config)
      Chem::Helpers.execute_list commands
    else
      raise "Invalid collection \"#{args[0]}\""
    end
  end
end

desc 'Execute a single command from a collection with substitution'
arg_name '<name> <id>'
command :run1 do |c|
  c.action do |global_options,options,args|
    collection = chem_config.get(args[0])
    if collection
      if args[1].to_i.to_s == args[1]
        collection = Chem::Collection.new(nil, [collection[args[1].to_i]])
        commands = collection.evaluate(chem_config)
        Chem::Helpers.execute_list commands
      else
        raise "Specify an integer id"
      end
    else
      raise "Invalid collection \"#{args[0]}\""
    end
  end
end

desc 'Execute a collection\'s Nth set of commands with substitution'
arg_name '<name> <index>'
command :runN do |c|
  c.action do |global_options,options,args|
    collection = chem_config.get(args[0])
    if collection
      if args[1].to_i.to_s == args[1]
        collection.validate(chem_config)
        commands = collection.evaluate(chem_config, args[1].to_i)
        Chem::Helpers.execute_list commands
      else
        raise "Specify an integer id"
      end
    else
      raise "Invalid collection \"#{args[0]}\""
    end
  end
end

exit run(ARGV)
